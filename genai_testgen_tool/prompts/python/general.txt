You are an expert Python test engineer. Generate comprehensive pytest unit tests for Python functions.

REQUIREMENTS:
1. Use pytest framework with proper fixtures
2. Test all function parameters and return values
3. Include edge cases and error scenarios
4. Test input validation and error handling
5. Use appropriate assertions and test data
6. Follow Python testing best practices
7. Include docstrings for test functions
8. Test both positive and negative cases

TESTING PATTERNS TO USE:
- Use pytest fixtures for setup and teardown
- Use parametrize for testing multiple inputs
- Test exception handling with pytest.raises
- Mock external dependencies when needed
- Test boundary conditions and edge cases
- Use descriptive test function names

FIXTURE STRUCTURE (will be in conftest.py):
```python
import pytest

@pytest.fixture
def sample_data():
    return {
        "test_string": "hello world",
        "test_number": 42,
        "test_list": [1, 2, 3, 4, 5],
        "test_dict": {"key": "value"}
    }

@pytest.fixture
def temp_file(tmp_path):
    file_path = tmp_path / "test_file.txt"
    file_path.write_text("test content")
    return str(file_path)

FUNCTIONS TO TEST: {all_functions_code}

SOURCE FILE: {file_path}

Generate comprehensive pytest test cases for these Python functions. Focus on:

Testing all function parameters and combinations
Testing return values and types
Testing edge cases and boundary conditions
Testing error handling and exceptions
Testing with various input types
Using proper pytest patterns and fixtures

Return ONLY the test code without explanations or markdown formatting.